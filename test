package com.convera.notification.config;

import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;
import com.amazonaws.encryptionsdk.kms.KmsMasterKeyProvider;
import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.amazonaws.services.s3.AmazonS3Encryption;
import com.amazonaws.services.s3.AmazonS3EncryptionClientBuilder;
import com.amazonaws.services.s3.model.CryptoConfiguration;
import com.amazonaws.services.s3.model.CryptoMode;
import com.amazonaws.services.s3.model.KMSEncryptionMaterialsProvider;
import com.amazonaws.services.securitytoken.AWSSecurityTokenService;
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder;
import com.amazonaws.services.simpleemail.AmazonSimpleEmailService;
import com.amazonaws.services.simpleemail.AmazonSimpleEmailServiceClientBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.sfn.SfnClient;

@Configuration
public class AWSConfig {

    @Value("${ses.assumed.role.arn}")
    public String assumedRole;

    @Value("${aws.region}")
    public String awsRegion;

    @Value("${ses.kms.key.arn}")
    public String sesKmsKeyArn;

    @Bean
    @Primary
    public AWSCredentialsProvider credentialsProvider() {
        AWSSecurityTokenService stsClient = AWSSecurityTokenServiceClientBuilder.standard()
                .withRegion(awsRegion)
                .build();

        return new STSAssumeRoleSessionCredentialsProvider
                .Builder(assumedRole, "test")
                .withStsClient(stsClient)
                .build();
    }

    @Bean
    public KmsMasterKeyProvider kmsMasterKeyProvider() {

        return KmsMasterKeyProvider.builder()
                .withCredentials(credentialsProvider())
                .withDefaultRegion(awsRegion)
                .buildStrict(sesKmsKeyArn);
    }

    @Bean
    public AmazonSimpleEmailService amazonSimpleEmailService(AWSCredentialsProvider credentialsProvider) {

        return AmazonSimpleEmailServiceClientBuilder.standard()
                .withRegion(awsRegion)
                .withCredentials(credentialsProvider)
                .build();
    }

    @Bean
    public AWSKMS awskms() {
        return AWSKMSClientBuilder.standard().withRegion(awsRegion)
                .build();
    }

    @Bean
    public AmazonS3Encryption amazonS3EncryptionClient(AWSCredentialsProvider credentialsProvider) {
        return AmazonS3EncryptionClientBuilder.standard()
                .withCredentials(credentialsProvider)
                .withCryptoConfiguration(new CryptoConfiguration(CryptoMode.AuthenticatedEncryption))
                .withEncryptionMaterials(new KMSEncryptionMaterialsProvider(sesKmsKeyArn))
                .withRegion(awsRegion)
                .build();
    }

    @Bean
    public SfnClient sfnClient(AWSCredentialsProvider credentialsProvider) {
        return SfnClient.builder()
                        .region(Region.of(awsRegion))
                        .build();
    }
}
