import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;
import software.amazon.awssdk.auth.credentials.StsAssumeRoleCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.kms.KmsClient;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.internal.crypto.CryptoConfiguration;
import software.amazon.awssdk.services.s3.internal.crypto.CryptoMode;
import software.amazon.awssdk.services.s3.internal.crypto.KmsKeyProvider;
import software.amazon.awssdk.services.ses.SesClient;
import software.amazon.awssdk.services.sfn.SfnClient;
import software.amazon.awssdk.services.sts.StsClient;

@Configuration
public class AWSConfig {

    @Value("${ses.assumed.role.arn}")
    private String assumedRole;

    @Value("${aws.region}")
    private String awsRegion;

    @Value("${ses.kms.key.arn}")
    private String sesKmsKeyArn;

    @Bean
    @Primary
    public AwsCredentialsProvider credentialsProvider() {
        StsClient stsClient = StsClient.builder()
                .region(Region.of(awsRegion))
                .build();

        return StsAssumeRoleCredentialsProvider.builder()
                .stsClient(stsClient)
                .roleArn(assumedRole)
                .roleSessionName("test")
                .build();
    }

    @Bean
    public KmsClient kmsClient(AwsCredentialsProvider credentialsProvider) {
        return KmsClient.builder()
                .region(Region.of(awsRegion))
                .credentialsProvider(credentialsProvider)
                .build();
    }

    @Bean
    public SesClient sesClient(AwsCredentialsProvider credentialsProvider) {
        return SesClient.builder()
                .region(Region.of(awsRegion))
                .credentialsProvider(credentialsProvider)
                .build();
    }

    @Bean
    public S3Client s3Client(AwsCredentialsProvider credentialsProvider) {
        return S3Client.builder()
                .region(Region.of(awsRegion))
                .credentialsProvider(credentialsProvider)
                .serviceConfiguration(S3Configuration.builder().build())
                .build();
    }

    @Bean
    public SfnClient sfnClient(AwsCredentialsProvider credentialsProvider) {
        return SfnClient.builder()
                .region(Region.of(awsRegion))
                .credentialsProvider(credentialsProvider)
                .build();
    }
}
