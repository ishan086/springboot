import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Date;
import java.util.*;

public class LargeExcelWriter {

    private static final int WINDOW_SIZE = 100;
    private static final int FLUSH_INTERVAL = 50;
    private static final int MAX_COLUMN_WIDTH = 100;

    public static <T, S> void writeLargeDataset(List<T> objects, S summaryObject, String filePath) throws IOException {
        // Validate inputs
        if (objects == null || objects.isEmpty()) {
            throw new IllegalArgumentException("Object list cannot be null or empty");
        }
        if (filePath == null || !filePath.toLowerCase().endsWith(".xlsx")) {
            throw new IllegalArgumentException("File path must end with .xlsx extension");
        }

        SXSSFWorkbook workbook = null;
        try {
            workbook = new SXSSFWorkbook(WINDOW_SIZE);
            workbook.setCompressTempFiles(true);

            // Create main data sheet with frozen header
            SXSSFSheet dataSheet = workbook.createSheet("Data");
            dataSheet.setRandomAccessWindowSize(WINDOW_SIZE);
            dataSheet.createFreezePane(0, 1, 0, 1); // Freeze header row

            // Get ordered fields for main data
            List<Field> orderedFields = getOrderedFields(objects.get(0).getClass());

            // Create styles
            CellStyle headerStyle = createHeaderStyle(workbook);
            Map<Class<?>, CellStyle> dataStyles = createDataStyles(workbook);

            // Create header row for data sheet
            createHeaderRow(dataSheet, orderedFields, headerStyle);

            // Write data rows with proper timestamp handling
            writeDataRows(dataSheet, objects, orderedFields, dataStyles, workbook);

            // Auto-size columns in data sheet
            autoSizeColumns(dataSheet, orderedFields.size());

            // Create summary sheet if summary object is provided
            if (summaryObject != null) {
                createSummarySheet(workbook, summaryObject, headerStyle);
            }

            // Write to file
            try (FileOutputStream fos = new FileOutputStream(filePath)) {
                workbook.write(fos);
            }
        } finally {
            if (workbook != null) {
                workbook.close();
            }
        }
    }

    private static List<Field> getOrderedFields(Class<?> clazz) {
        return Arrays.stream(clazz.getDeclaredFields())
                .filter(f -> f.isAnnotationPresent(ExcelColumn.class))
                .sorted(Comparator.comparingInt(f -> f.getAnnotation(ExcelColumn.class).order()))
                .collect(Collectors.toList());
    }

    private static CellStyle createHeaderStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        font.setColor(IndexedColors.WHITE.getIndex());
        style.setFont(font);
        style.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        return style;
    }

    private static Map<Class<?>, CellStyle> createDataStyles(Workbook workbook) {
        Map<Class<?>, CellStyle> styles = new HashMap<>();
        
        // Default style
        CellStyle defaultStyle = workbook.createCellStyle();
        defaultStyle.setAlignment(HorizontalAlignment.LEFT);
        styles.put(Object.class, defaultStyle);

        // Number style
        CellStyle numberStyle = workbook.createCellStyle();
        numberStyle.setAlignment(HorizontalAlignment.RIGHT);
        styles.put(Number.class, numberStyle);

        // Date style (base format - will be overridden for timestamps)
        CellStyle dateStyle = workbook.createCellStyle();
        dateStyle.setDataFormat(workbook.createDataFormat().getFormat("yyyy-mm-dd"));
        styles.put(Date.class, dateStyle);

        // Boolean style
        CellStyle booleanStyle = workbook.createCellStyle();
        booleanStyle.setAlignment(HorizontalAlignment.CENTER);
        styles.put(Boolean.class, booleanStyle);

        return styles;
    }

    private static void createHeaderRow(SXSSFSheet sheet, List<Field> fields, CellStyle headerStyle) {
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < fields.size(); i++) {
            Field field = fields.get(i);
            ExcelColumn annotation = field.getAnnotation(ExcelColumn.class);
            String header = annotation.header().isEmpty() ? field.getName() : annotation.header();
            
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(header);
            cell.setCellStyle(headerStyle);
        }
    }

    private static <T> void writeDataRows(SXSSFSheet sheet, List<T> objects, 
            List<Field> fields, Map<Class<?>, CellStyle> dataStyles, Workbook workbook) {
        int rowCount = 0;
        
        for (T obj : objects) {
            Row row = sheet.createRow(++rowCount);
            
            for (int i = 0; i < fields.size(); i++) {
                Field field = fields.get(i);
                try {
                    field.setAccessible(true);
                    Object value = field.get(obj);
                    Cell cell = row.createCell(i);
                    
                    if (value != null) {
                        setCellValue(cell, value, dataStyles, workbook);
                    }
                } catch (IllegalAccessException e) {
                    throw new RuntimeException("Error accessing field value", e);
                }
            }
            
            if (rowCount % FLUSH_INTERVAL == 0) {
                try {
                    sheet.flushRows(FLUSH_INTERVAL);
                } catch (IOException e) {
                    throw new RuntimeException("Error flushing rows", e);
                }
            }
        }
    }

    private static void setCellValue(Cell cell, Object value, 
            Map<Class<?>, CellStyle> dataStyles, Workbook workbook) {
        Class<?> valueType = value.getClass();
        CellStyle style = dataStyles.getOrDefault(valueType, 
            dataStyles.get(Number.class.isAssignableFrom(valueType) ? Number.class :
            Date.class.isAssignableFrom(valueType) ? Date.class :
            Boolean.class.isAssignableFrom(valueType) ? Boolean.class :
            Object.class));
        
        // Special handling for dates to include timestamp
        if (value instanceof Date) {
            CellStyle dateTimeStyle = workbook.createCellStyle();
            dateTimeStyle.cloneStyleFrom(style);
            dateTimeStyle.setDataFormat(workbook.createDataFormat().getFormat("yyyy-mm-dd hh:mm"));
            cell.setCellStyle(dateTimeStyle);
            cell.setCellValue((Date) value);
        } else {
            cell.setCellStyle(style);
            
            if (value instanceof Number) {
                cell.setCellValue(((Number) value).doubleValue());
            } else if (value instanceof Boolean) {
                cell.setCellValue((Boolean) value);
            } else {
                cell.setCellValue(value.toString());
            }
        }
    }

    private static void autoSizeColumns(SXSSFSheet sheet, int columnCount) {
        for (int i = 0; i < columnCount; i++) {
            sheet.trackColumnForAutoSizing(i);
            sheet.autoSizeColumn(i);
            int currentWidth = sheet.getColumnWidth(i);
            int maxWidth = MAX_COLUMN_WIDTH * 256; // Convert to Excel units
            if (currentWidth > maxWidth) {
                sheet.setColumnWidth(i, maxWidth);
            }
        }
    }

    private static <S> void createSummarySheet(SXSSFWorkbook workbook, S summaryObject, CellStyle headerStyle) {
        SXSSFSheet summarySheet = workbook.createSheet("Summary");
        summarySheet.setRandomAccessWindowSize(10);

        // Create header
        Row headerRow = summarySheet.createRow(0);
        headerRow.createCell(0).setCellValue("Field Name");
        headerRow.createCell(1).setCellValue("Value");
        headerRow.getCell(0).setCellStyle(headerStyle);
        headerRow.getCell(1).setCellStyle(headerStyle);

        // Create date style for 24-hour timestamp
        CellStyle timestampStyle = workbook.createCellStyle();
        timestampStyle.setDataFormat(workbook.createDataFormat().getFormat("yyyy-mm-dd hh:mm"));

        // Write summary data
        int rowNum = 1;
        for (Field field : summaryObject.getClass().getDeclaredFields()) {
            try {
                field.setAccessible(true);
                Object value = field.get(summaryObject);
                
                Row row = summarySheet.createRow(rowNum++);
                row.createCell(0).setCellValue(field.getName());
                
                if (value != null) {
                    Cell valueCell = row.createCell(1);
                    if (value instanceof Date) {
                        valueCell.setCellValue((Date) value);
                        valueCell.setCellStyle(timestampStyle);
                    } else if (value instanceof Number) {
                        valueCell.setCellValue(((Number) value).doubleValue());
                    } else if (value instanceof Boolean) {
                        valueCell.setCellValue((Boolean) value);
                    } else {
                        valueCell.setCellValue(value.toString());
                    }
                }
            } catch (IllegalAccessException e) {
                throw new RuntimeException("Error accessing summary field", e);
            }
        }

        // Auto-size columns
        summarySheet.autoSizeColumn(0);
        summarySheet.autoSizeColumn(1);
    }
}
