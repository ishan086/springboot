import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.DefaultAWSCredentialsProviderChain;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.rds.RdsUtilities;
import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;
import software.amazon.awssdk.utils.IoUtils;

import javax.sql.DataSource;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

@Configuration
public class DataSourceConfig {

    @Value("${aws.rds.endpoint}")
    private String endpoint;

    @Value("${aws.rds.port}")
    private int port;

    @Value("${aws.rds.dbname}")
    private String dbname;

    @Value("${aws.region}")
    private String region;

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private volatile HikariDataSource dataSource;

    @PostConstruct
    public void init() {
        refreshDataSource();
        scheduler.scheduleAtFixedRate(this::refreshDataSource, 14, 14, TimeUnit.MINUTES);
    }

    @PreDestroy
    public void destroy() {
        scheduler.shutdown();
        if (dataSource != null) {
            dataSource.close();
        }
    }

    private void refreshDataSource() {
        RdsUtilities rdsUtilities = RdsUtilities.builder()
                .credentialsProvider(DefaultAWSCredentialsProviderChain.create())
                .region(Region.of(region))
                .build();

        String token = rdsUtilities.generateAuthenticationToken(
                GenerateAuthenticationTokenRequest.builder()
                        .username("iam_user")
                        .hostname(endpoint)
                        .port(port)
                        .build()
        );

        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(String.format("jdbc:postgresql://%s:%d/%s", endpoint, port, dbname));
        config.setUsername("iam_user");
        config.setPassword(token);
        config.setDriverClassName("org.postgresql.Driver");

        if (dataSource != null) {
            dataSource.close();
        }
        dataSource = new HikariDataSource(config);
    }

    @Bean
    public DataSource dataSource() {
        return () -> dataSource.getConnection();
    }
}
