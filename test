import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;
import java.nio.file.*;
import java.time.*;
import java.time.format.*;
import java.util.*;
import java.util.regex.*;

public class S3FlexibleUploader {

    private final S3Client s3Client;
    private final String bucketName;
    private final Path sourceDir;
    private static final String PARENT_FOLDER = "reporting/";

    public S3FlexibleUploader(S3Client s3Client, String bucketName, String sourceDir) {
        this.s3Client = s3Client;
        this.bucketName = bucketName;
        this.sourceDir = Paths.get(sourceDir);
    }

    /**
     * Uploads files to S3 with flexible destination based on upload type
     * @param uploadType "regular" for date-based folders or "adhoc" for adhoc folder
     */
    public void uploadFiles(String uploadType) {
        validateUploadType(uploadType);
        boolean isAdhoc = uploadType.equalsIgnoreCase("adhoc");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(sourceDir, "*.xlsx")) {
            ensureParentFolderExists();

            for (Path file : stream) {
                String filename = file.getFileName().toString();
                
                if (isAdhoc) {
                    uploadToAdhocFolder(file);
                } else {
                    Optional<LocalDate> fileDate = extractDateFromFilename(filename);
                    fileDate.ifPresentOrElse(
                        date -> uploadToDateFolder(file, date),
                        () -> System.out.println("Skipping - Could not extract date from: " + filename)
                    );
                }
            }
        } catch (Exception e) {
            handleUploadError(e);
        }
    }

    private void validateUploadType(String uploadType) {
        if (!uploadType.equalsIgnoreCase("regular") && !uploadType.equalsIgnoreCase("adhoc")) {
            throw new IllegalArgumentException("Upload type must be either 'regular' or 'adhoc'");
        }
    }

    private void ensureParentFolderExists() {
        if (!folderExists(PARENT_FOLDER)) {
            createFolder(PARENT_FOLDER);
        }
    }

    private void uploadToAdhocFolder(Path file) {
        String filename = file.getFileName().toString();
        String s3Key = PARENT_FOLDER + "adhoc/" + filename;
        
        try {
            ensureFolderExists(PARENT_FOLDER + "adhoc/");
            uploadFileToS3(file, s3Key);
            System.out.println("Successfully uploaded to adhoc folder: " + s3Key);
        } catch (Exception e) {
            throw new RuntimeException("Adhoc upload failed for: " + filename, e);
        }
    }

    private void uploadToDateFolder(Path file, LocalDate date) {
        String year = String.valueOf(date.getYear());
        String month = date.getMonth().name();
        String day = String.valueOf(date.getDayOfMonth());
        
        ensureDateFolderStructureExists(year, month, day);
        
        String filename = file.getFileName().toString();
        String s3Key = PARENT_FOLDER + year + "/" + month + "/" + day + "/" + filename;
        
        try {
            uploadFileToS3(file, s3Key);
            System.out.println("Successfully uploaded to date folder: " + s3Key);
        } catch (Exception e) {
            throw new RuntimeException("Date-based upload failed for: " + filename, e);
        }
    }

    private void uploadFileToS3(Path file, String s3Key) {
        PutObjectRequest request = PutObjectRequest.builder()
            .bucket(bucketName)
            .key(s3Key)
            .build();
        s3Client.putObject(request, RequestBody.fromFile(file));
    }

    private Optional<LocalDate> extractDateFromFilename(String filename) {
        // Pattern 1: s3report_April_2_2025.xlsx
        Pattern pattern1 = Pattern.compile(".*_(\\w+)_(\\d+)_(\\d+)\\.xlsx");
        // Pattern 2: dbreport_April2_2025.xlsx
        Pattern pattern2 = Pattern.compile(".*_(\\w+)(\\d+)_(\\d+)\\.xlsx");

        Matcher matcher1 = pattern1.matcher(filename);
        Matcher matcher2 = pattern2.matcher(filename);

        try {
            if (matcher1.matches()) {
                return parseDateComponents(matcher1.group(1), matcher1.group(2), matcher1.group(3));
            } else if (matcher2.matches()) {
                String monthDay = matcher2.group(2);
                String day = monthDay.replaceAll("^0+", "");
                return parseDateComponents(matcher2.group(1), day, matcher2.group(3));
            }
        } catch (Exception e) {
            System.err.println("Date extraction error for " + filename + ": " + e.getMessage());
        }
        return Optional.empty();
    }

    private Optional<LocalDate> parseDateComponents(String month, String day, String year) {
        try {
            DateTimeFormatter monthFormatter = DateTimeFormatter.ofPattern("MMMM");
            Month monthObj = Month.from(monthFormatter.parse(month));
            return Optional.of(LocalDate.of(
                Integer.parseInt(year),
                monthObj,
                Integer.parseInt(day)
            ));
        } catch (Exception e) {
            System.err.println("Date parsing error: " + e.getMessage());
            return Optional.empty();
        }
    }

    private void ensureDateFolderStructureExists(String year, String month, String day) {
        String[] folders = {
            PARENT_FOLDER + year + "/",
            PARENT_FOLDER + year + "/" + month + "/",
            PARENT_FOLDER + year + "/" + month + "/" + day + "/"
        };

        for (String folder : folders) {
            if (!folderExists(folder)) {
                createFolder(folder);
            }
        }
    }

    private boolean folderExists(String folderPath) {
        try {
            s3Client.headObject(HeadObjectRequest.builder()
                .bucket(bucketName)
                .key(folderPath)
                .build());
            return true;
        } catch (S3Exception e) {
            if (e.statusCode() == 404) return false;
            throw e;
        }
    }

    private void createFolder(String folderPath) {
        s3Client.putObject(PutObjectRequest.builder()
            .bucket(bucketName)
            .key(folderPath)
            .build(), RequestBody.empty());
        System.out.println("Created folder: " + folderPath);
    }

    private void handleUploadError(Exception e) {
        System.err.println("Error processing files: " + e.getMessage());
        throw new RuntimeException("File upload failed", e);
    }

    public static void main(String[] args) {
        // Initialize AWS S3 client
        S3Client s3Client = S3Client.builder()
            .region(Region.US_EAST_1) // Set your region
            .build();

        String bucketName = "your-bucket-name";
        String sourceDirectory = "reports";
        
        S3FlexibleUploader uploader = new S3FlexibleUploader(s3Client, bucketName, sourceDirectory);
        
        // Example usage:
        // For regular date-based upload
        uploader.uploadFiles("regular");
        
        // For adhoc upload
        // uploader.uploadFiles("adhoc");
    }
}
