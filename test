import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.AreaReference;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFTable;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.*;
import java.util.stream.Collectors;

public class ExcelTableWriter {

    public static <T> void writeAsExcelTable(List<T> objects, String filePath, String tableName) throws IOException {
        if (objects == null || objects.isEmpty()) {
            throw new IllegalArgumentException("Object list cannot be null or empty");
        }

        // Create workbook and sheet
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Data");

        // Get fields with ExcelColumn annotation, ordered
        Class<?> objectClass = objects.get(0).getClass();
        List<Field> orderedFields = Arrays.stream(objectClass.getDeclaredFields())
                .filter(f -> f.isAnnotationPresent(ExcelColumn.class))
                .sorted(Comparator.comparingInt(f -> f.getAnnotation(ExcelColumn.class).order()))
                .collect(Collectors.toList());

        // Create styles
        CellStyle headerStyle = createHeaderStyle(workbook);
        CellStyle dataStyle = createDataStyle(workbook);

        // Create header row
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < orderedFields.size(); i++) {
            Field field = orderedFields.get(i);
            ExcelColumn annotation = field.getAnnotation(ExcelColumn.class);
            String headerName = annotation.header().isEmpty() ? field.getName() : annotation.header();
            
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headerName);
            cell.setCellStyle(headerStyle);
        }

        // Create data rows
        for (int rowNum = 0; rowNum < objects.size(); rowNum++) {
            T obj = objects.get(rowNum);
            Row row = sheet.createRow(rowNum + 1);

            for (int colNum = 0; colNum < orderedFields.size(); colNum++) {
                Field field = orderedFields.get(colNum);
                try {
                    field.setAccessible(true);
                    Object value = field.get(obj);
                    Cell cell = row.createCell(colNum);
                    cell.setCellStyle(dataStyle);

                    if (value != null) {
                        if (value instanceof Number) {
                            cell.setCellValue(((Number) value).doubleValue());
                        } else if (value instanceof Boolean) {
                            cell.setCellValue((Boolean) value);
                        } else {
                            cell.setCellValue(value.toString());
                        }
                    }
                } catch (IllegalAccessException e) {
                    throw new RuntimeException("Error accessing field value", e);
                }
            }
        }

        // Create Excel table (correct way)
        createExcelTable(workbook, sheet, orderedFields.size(), objects.size(), tableName);

        // Auto-size columns
        for (int i = 0; i < orderedFields.size(); i++) {
            sheet.autoSizeColumn(i);
        }

        // Write to file
        try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
            workbook.write(fileOut);
        } finally {
            workbook.close();
        }
    }

    private static CellStyle createHeaderStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        font.setBold(true);
        font.setColor(IndexedColors.WHITE.getIndex());
        style.setFont(font);
        style.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setAlignment(HorizontalAlignment.CENTER);
        return style;
    }

    private static CellStyle createDataStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setAlignment(HorizontalAlignment.LEFT);
        return style;
    }

    private static void createExcelTable(XSSFWorkbook workbook, XSSFSheet sheet, int colCount, int rowCount, String tableName) {
        // Define the area of the table
        AreaReference areaReference = new AreaReference(
                new CellReference(0, 0),
                new CellReference(rowCount, colCount - 1),  // -1 because columns are 0-based
                SpreadsheetVersion.EXCEL2007);

        // Create the table
        XSSFTable table = sheet.createTable(areaReference);
        table.setName(tableName);
        table.setDisplayName(tableName);

        // Style the table
        CTTable ctTable = table.getCTTable();
        CTTableStyleInfo styleInfo = ctTable.addNewTableStyleInfo();
        styleInfo.setName("TableStyleMedium9");
        styleInfo.setShowColumnStripes(false);
        styleInfo.setShowRowStripes(true);

        // Add table columns with headers
        Row headerRow = sheet.getRow(0);
        CTTableColumns columns = ctTable.addNewTableColumns();
        columns.setCount(colCount);
        
        for (int i = 0; i < colCount; i++) {
            CTTableColumn column = columns.addNewTableColumn();
            column.setId(i + 1);
            column.setName(headerRow.getCell(i).getStringCellValue());
        }
    }
}
