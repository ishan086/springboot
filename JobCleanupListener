package com.example.batch.listener;

import jakarta.annotation.PostConstruct;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class JobCleanupListener implements JobExecutionListener {

    private final JdbcTemplate jdbcTemplate;

    public JobCleanupListener(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @PostConstruct
    public void cleanupOnStartup() {
        deletePreviousJobDataIfExists();
    }

    @Override
    public void beforeJob(JobExecution jobExecution) {
        deletePreviousJobDataIfExists();
    }

    private void deletePreviousJobDataIfExists() {
        if (hasPreviousJobData()) {
            System.out.println("Previous job execution data found. Deleting...");
            jdbcTemplate.update("DELETE FROM BATCH_STEP_EXECUTION_CONTEXT");
            jdbcTemplate.update("DELETE FROM BATCH_STEP_EXECUTION");
            jdbcTemplate.update("DELETE FROM BATCH_JOB_EXECUTION_CONTEXT");
            jdbcTemplate.update("DELETE FROM BATCH_JOB_EXECUTION_PARAMS");
            jdbcTemplate.update("DELETE FROM BATCH_JOB_EXECUTION");
            jdbcTemplate.update("DELETE FROM BATCH_JOB_INSTANCE");
            System.out.println("Previous job execution data deleted.");
        } else {
            System.out.println("No previous job execution data found. Skipping deletion.");
        }
    }

    private boolean hasPreviousJobData() {
        Integer count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM BATCH_JOB_INSTANCE", Integer.class);
        return count != null && count > 0;
    }

    @Override
    public void afterJob(JobExecution jobExecution) {
        // No action needed after the job
    }
}
